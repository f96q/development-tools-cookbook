- hosts: all
  become: yes
  vars:
    user: vagrant
  tasks:
    - name: Set timezone
      timezone: name=Asia/Tokyo

    - name: Add docker key
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg state=present

    - name: Add docker repo
      apt_repository: repo='deb [arch=amd64] http://download.docker.com/linux/ubuntu {{ansible_distribution_release}} stable' state=present

    - name: Add heroku key
      apt_key: url=https://cli-assets.heroku.com/apt/release.key state=present

    - name: Add heroku repo
      apt_repository: repo='deb http://cli-assets.heroku.com/branches/stable/apt ./' state=present

    - name: Add elixir repo
      apt:
        deb: https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb

    - name: Add node key
      apt_key: url=https://deb.nodesource.com/gpgkey/nodesource.gpg.key state=present

    - name: Add node repo
      apt_repository: repo='deb https://deb.nodesource.com/node_9.x {{ansible_distribution_release}} main' state=present

    - name: Install packages
      apt: name={{item}} state=present update_cache=yes
      with_items:
        - language-pack-ja
        - ntp
        - zsh
        - screen
        - emacs-nox
        - silversearcher-ag
        - mysql-server
        - redis-server
        - elasticsearch
        - imagemagick
        - ruby
        - ruby-dev
        - nodejs
        - phantomjs
        - python-pip
        - libxml2-dev
        - libmagick++-dev
        - libmysql++-dev
        - libpq-dev
        - libcurl4-openssl-dev
        - docker-ce
        - heroku
        - elixir
        - erlang-dev
        - erlang-parsetools
        - libssl-dev
        - libreadline-dev
        - postgresql

    - name: Add docker group
      user: name={{user}} append=yes groups=docker

    - name: Install docker-compose
      pip:
        name: docker-compose

    - name: Start services
      action: service name={{item}} state=started enabled=yes
      with_items:
        - mysql
        - redis
        - elasticsearch
        - docker
        - postgresql

    - name: Install awscli
      pip: name=awscli state=present

    - name: Install bundler
      gem: name=bundler user_install=no state=present

    - name: Install yarn
      npm: name=yarn global=yes state=present

    - name: Install docker-clean
      npm: name=docker-clean global=yes state=present

    - name: Install rbenv
      become_user: '{{user}}'
      git: repo=https://github.com/rbenv/rbenv.git dest=/home/{{user}}/.rbenv accept_hostkey=yes

    - name: Install ruby-build
      become_user: '{{user}}'
      git: repo=https://github.com/rbenv/ruby-build.git dest=/home/{{user}}/.rbenv/plugins/ruby-build accept_hostkey=yes

    - name: Execute chsh zsh
      command: chsh {{user}} -s /bin/zsh

    - name: Execute git clone dotfiles
      become_user: '{{user}}'
      git: repo=https://github.com/f96q/dotfiles.git dest=/home/{{user}}/dotfiles accept_hostkey=yes

    - name: Setup dotfiles
      become_user: '{{user}}'
      command: bash setup.sh chdir=/home/{{user}}/dotfiles

    - name: Allow Empty mysql root password
      command: mysql -u root -e "ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY '';"

    - name: Create Role
      become_user: postgres
      command: psql -c 'create role {{user}} with LOGIN SUPERUSER CREATEDB CREATEROLE REPLICATION BYPASSRLS;'
